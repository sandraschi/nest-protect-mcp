name: Release Management

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Type of release'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
          - prerelease
      prerelease_suffix:
        description: 'Prerelease suffix (e.g., alpha, beta, rc)'
        required: false

env:
  PYTHON_VERSION: '3.11'

jobs:
  # Release preparation
  prepare-release:
    name: Prepare Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      changelog: ${{ steps.changelog.outputs.changelog }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install bump2version

    - name: Generate version
      id: version
      run: |
        if [[ $GITHUB_EVENT_NAME == 'workflow_dispatch' ]]; then
          # Manual release
          VERSION_TYPE="${{ github.event.inputs.version_type }}"
          SUFFIX="${{ github.event.inputs.prerelease_suffix }}"

          if [[ $VERSION_TYPE == "prerelease" && -n "$SUFFIX" ]]; then
            python -c "
              import re
              with open('pyproject.toml', 'r') as f:
                content = f.read()
              version_match = re.search(r'version = \"([^\"]+)\"', content)
              if version_match:
                current_version = version_match.group(1)
                parts = current_version.split('.')
                if len(parts) >= 3:
                  new_version = f'{parts[0]}.{parts[1]}.{int(parts[2]) + 1}-{SUFFIX}.1'
                  print(f'NEW_VERSION={new_version}')
            " >> $GITHUB_OUTPUT
          else
            python -c "
              import re
              with open('pyproject.toml', 'r') as f:
                content = f.read()
              version_match = re.search(r'version = \"([^\"]+)\"', content)
              if version_match:
                current_version = version_match.group(1)
                parts = current_version.split('.')
                if VERSION_TYPE == 'major':
                  new_version = f'{int(parts[0]) + 1}.0.0'
                elif VERSION_TYPE == 'minor':
                  new_version = f'{parts[0]}.{int(parts[1]) + 1}.0'
                else:  # patch
                  new_version = f'{parts[0]}.{parts[1]}.{int(parts[2]) + 1}'
                print(f'NEW_VERSION={new_version}')
            " >> $GITHUB_OUTPUT
          fi
        else
          # Tag-based release
          TAG_VERSION="${GITHUB_REF#refs/tags/v}"
          echo "NEW_VERSION=${TAG_VERSION}" >> $GITHUB_OUTPUT
        fi

    - name: Update version files
      if: github.event_name == 'workflow_dispatch'
      run: |
        bump2version --allow-dirty --new-version ${{ steps.version.outputs.version }} ${{ github.event.inputs.version_type }}

    - name: Generate changelog
      id: changelog
      run: |
        # Generate changelog using git history
        python -c "
          import subprocess
          import sys

          try:
            # Get recent commits since last tag
            result = subprocess.run([
                'git', 'log', '--oneline', '--format=%h %s',
                '--since=\"1 month ago\"'
            ], capture_output=True, text=True, check=True)

            commits = result.stdout.strip().split('\n')[:20]  # Last 20 commits
            changelog = '# Recent Changes\\n\\n'
            for commit in commits:
              if commit.strip():
                changelog += f'- {commit}\\n'

            print(f'CHANGELOG<<EOF\\n{changelog}\\nEOF')
          except Exception as e:
            print(f'Error generating changelog: {e}')
            print('CHANGELOG<<EOF\\n# Release ${{ steps.version.outputs.version }}\\n\\n- Automated release\\nEOF')
        " >> $GITHUB_OUTPUT

    - name: Create release PR
      if: github.event_name == 'workflow_dispatch'
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        branch: release/v${{ steps.version.outputs.version }}
        delete-branch: true
        title: "Release v${{ steps.version.outputs.version }}"
        body: |
          ## Release v${{ steps.version.outputs.version }}

          ${{ steps.changelog.outputs.changelog }}

          ### Changes
          - Version bump to ${{ steps.version.outputs.version }}
          - Automated release preparation

        labels: |
          release
          automated

  # Create GitHub release
  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: prepare-release
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      run: |
        python -m build

    - name: Build DXT package
      run: |
        cd dxt && python dxt_build.py

    - name: Generate release notes
      id: release-notes
      run: |
        python -c "
          import subprocess
          import json

          # Get recent commits
          result = subprocess.run([
              'git', 'log', '--oneline', '--format=%h %s',
              '--since=\"2 weeks ago\"'
          ], capture_output=True, text=True, check=True)

          commits = [line.strip() for line in result.stdout.strip().split('\\n') if line.strip()]

          notes = f'# Release v${{ needs.prepare-release.outputs.version }}\\n\\n'
          notes += '## Changes\\n\\n'

          for commit in commits[:10]:  # Last 10 commits
            if commit:
              notes += f'- {commit}\\n'

          notes += '\\n## Files\\n\\n'
          notes += '- Python wheel (pip install)\\n'
          notes += '- Source distribution\\n'
          notes += '- DXT package (MCP deployment)\\n'

          print(f'RELEASE_NOTES<<EOF\\n{notes}\\nEOF')
        " >> $GITHUB_OUTPUT

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          dist/*
        body: ${{ steps.release-notes.outputs.RELEASE_NOTES }}
        generate_release_notes: true
        draft: false
        prerelease: ${{ contains(needs.prepare-release.outputs.version, '-') }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Publish to PyPI
      if: contains(needs.prepare-release.outputs.version, '-') == false
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.PYPI_API_TOKEN }}
        skip-existing: true

  # Post-release updates
  post-release:
    name: Post-Release Updates
    runs-on: ubuntu-latest
    needs: [prepare-release, release]
    if: github.event_name == 'workflow_dispatch'

    steps:
    - name: Checkout main branch
      uses: actions/checkout@v4
      with:
        ref: main
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Merge release branch
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git pull origin release/v${{ needs.prepare-release.outputs.version }} --no-edit
        git push origin main

    - name: Delete release branch
      run: |
        git push origin --delete release/v${{ needs.prepare-release.outputs.version }}
