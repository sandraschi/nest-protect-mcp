name: Dependency Management

on:
  schedule:
    - cron: '0 8 * * 1'  # Weekly on Mondays at 8 AM UTC
  workflow_dispatch:
    inputs:
      update_type:
        description: 'Type of dependency update'
        required: true
        default: 'security'
        type: choice
        options:
          - security
          - minor
          - major

env:
  PYTHON_VERSION: '3.11'

jobs:
  dependency-check:
    name: Check for Dependency Updates
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pip-tools safety

    - name: Check for outdated dependencies
      run: |
        pip-compile --upgrade --dry-run requirements.txt > outdated_deps.txt || true

    - name: Check for security vulnerabilities
      run: |
        safety check --json > security_report.json || true

    - name: Upload dependency reports
      uses: actions/upload-artifact@v4
      with:
        name: dependency-reports
        path: |
          outdated_deps.txt
          security_report.json

  update-dependencies:
    name: Update Dependencies
    runs-on: ubuntu-latest
    needs: dependency-check
    if: github.event_name == 'workflow_dispatch' || github.event.schedule == '0 8 * * 1'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pip-tools

    - name: Update dependencies
      run: |
        UPDATE_TYPE="${{ github.event.inputs.update_type || 'minor' }}"

        if [[ $UPDATE_TYPE == "security" ]]; then
          pip-compile --upgrade-package fastmcp --upgrade-package aiohttp --upgrade-package pydantic
        elif [[ $UPDATE_TYPE == "major" ]]; then
          pip-compile --upgrade
        else
          pip-compile --upgrade --upgrade-package fastmcp --upgrade-package aiohttp --upgrade-package pydantic
        fi

    - name: Check if dependencies changed
      id: check-changes
      run: |
        if git diff --quiet requirements.txt; then
          echo "NO_CHANGES=true" >> $GITHUB_OUTPUT
        else
          echo "NO_CHANGES=false" >> $GITHUB_OUTPUT
        fi

    - name: Create dependency update PR
      if: steps.check-changes.outputs.NO_CHANGES == 'false'
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        branch: dependency-updates
        delete-branch: true
        title: "Dependency Updates"
        body: |
          ## Dependency Updates

          This PR updates dependencies based on the ${{ github.event.inputs.update_type || 'scheduled' }} update.

          ### Changes
          - Updated dependency versions in requirements.txt
          - Security and compatibility improvements

        labels: |
          dependencies
          automated
